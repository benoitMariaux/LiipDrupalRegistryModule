<?php

namespace Liip\Drupal\Modules\Registry\Database;

use Assert\Assertion;
use Liip\Drupal\Modules\Registry\Registry;
use Liip\Drupal\Modules\Registry\RegistryException;


class MySql extends Registry
{
    /**
     * @var array Configuration information about the mysql database
     */
    protected $dbConfig = array();

    /**
     * @param string $section
     * @param Assertion $assertion
     */
    public function __construct($section, Assertion $assertion)
    {
        $section = strtolower($section);

        parent::__construct($section, $assertion);
    }

    /**
     * @return array
     */
    public function getContent()
    {
        return parent::getContent();
    }

    /**
     * @param array $identifiers
     *
     * @return array
     */
    public function getContentByIds(array $identifiers)
    {
        return parent::getContentByIds($identifiers); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $identifier
     * @param null $default
     *
     * @return mixed
     */
    public function getContentById($identifier, $default = null)
    {
        return parent::getContentById($identifier, $default); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $identifier
     * @param mixed $value
     */
    public function register($identifier, $value)
    {
        parent::register($identifier, $value); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $identifier
     *
     * @return bool
     */
    public function isRegistered($identifier)
    {
        return parent::isRegistered($identifier); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $identifier
     * @param mixed $value
     */
    public function replace($identifier, $value)
    {
        parent::replace($identifier, $value); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $identifier
     */
    public function unregister($identifier)
    {
        parent::unregister($identifier); // TODO: Change the autogenerated stub
    }

    /**
     * Shall delete the current registry from the database.
     *
     * @throws RegistryException in case the deletion of the database failed.
     */
    public function destroy()
    {
        $mysql = $this->getDatabase();

        // delete DB
        $sql = sprintf(
            'DELETE %s;',
            $mysql->quote($this->section)
        );

        if (false === $mysql->exec($sql)) {
            $error = $mysql->errorInfo();

            throw new RegistryException(
                'Unable to delete the database: '. $error[2],
                $error[1]
            );
        }

    }

    /**
     * Shall register a new section in the registry
     */
    public function init()
    {
        $config = $this->getConfiguration();
        $mysql = $this->getDatabase();

        $sql = sprintf($config['tableSQL'], $this->section);

        if (false === $mysql->query($sql)) {
            $error = $mysql->errorInfo();

            throw new RegistryException(
                'Failed to create the registry table: '. $error[2],
                $error[1]
            );
        }
    }

    /**
     * Stores the given configuration info.
     *
     * @param array $config
     */
    public function setConfiguration(array $config)
    {
        $this->validateConfiguration($config);

        $this->dbConfig = $config;
    }

    /**
     * Provides the currently set database configuration.
     *
     * @throws \Liip\Drupal\Modules\Registry\RegistryException
     * @return array
     */
    public function getConfiguration()
    {
        if (empty($this->dbConfig)) {
            throw new RegistryException('No database configuration provided!', RegistryException::MISSING_DEPENDENCY_CODE);
        }
        return $this->dbConfig;
    }

    /**
     * Verifies the provided database configuration.
     *
     * Mandatory entries:
     *   - DSN      Data Source Name to identify the connection to be established
     *   - user     Name of the user to connect
     *   - tableSQL SQL to crate a database table
     *
     * Optional entries:
     *   - password  the password used to connect with.
     *
     *
     * @param array $config
     * @throws \Assert\InvalidArgumentException in case of at least on missing mandatory configutation attribute.
     */
    protected function validateConfiguration(array $config)
    {
        $mandatory = array('dsn', 'user', 'tableSQL');

        $this->assertion->inArray($mandatory, $config, 'Incomplete configuration array!');
    }

    /**
     * Sets the database connection resource to be used to query.
     *
     * @param \PDO $mysql
     */
    public function setDatabase(\PDO $mysql)
    {
        $this->mysql = $mysql;
    }

    /**
     * Establishes a connection to the configured MySql server.
     *
     * @return \PDO
     * @throws \PDOException
     */
    public function getDatabase()
    {
        if (empty($this->mysql)) {
            $config = $this->getConfiguration();

            if (isset($config['password'])) {

                $this->mysql = new \PDO($config['dsn'], $config['user'], $config['password']);
            } else {

                $this->mysql = new \PDO($config['dsn'], $config['user']);
            }
        }

        return $this->mysql;
    }
}
